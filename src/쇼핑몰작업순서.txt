1. 전체상품 페이지/로그인/상품상세페이지/user페이지
- src 폴더에 페이지 폴더 생성해서 작업할 페이지를 생성
- App.js에서 Routes로 각 페이지 연결

1-1 네비게이션바 - 컴포넌트
- App.js에서 import해서 연결함
1-2 네비게이션바에서
    1) 로그인영역
    2) 로고영역 -> Link to로 인덱스로 가도록 연결
    3) 네비게이션 영역 -> 부트스트랩에서 Navbar로 연결해볼 것을 권장.
    --> localhost:3000을 기준으로 각각의 페이지가 나오는지 연결 테스트
    --> localhost:3000/login
    --> localhost:3000/user
    --> localhost:3000/products 등
    --> localhost:3000뒤에 붙는 경로는 App.js에서 Route속성에 붙은 path에 선언된 경로


2. 전체상품 페이지에서는 기본 상품이 진열됨
npm install -g json-server
새 터미널을 열어서 json-server --watch db.json --port 5000
포트 번호는 3000번만 아니면 됨
서버연결이 되면 리소스 정보를 ctrl 누르고 클릭해서 data정보 먼저 확인
Resoureces
htttp://localhost:5000/products

2-1 전체상품 페이지에서 진열될 각 상품은 컴포넌트로 ProductCard.js로 생성
--> 전체상품 페이지에서 불러온 db.json 파일의 필드값을 카드 페이지로 상속되게 함.
--> Distrucyturing(객체분할)
--> 전체 상품 페이지에 생성한 ProductCard 엘리먼트를 뿌려줌

3. 로그인 버튼을 클릭하면 로그인 페이지 나옴
--> 전체 상품 페이지에서 상품 카드를 클릭하면 
    ->> 로그인 상태가 true -> 상세페이지가 보이고
    ->> 로그인 상태가 false -> login 페이지 

3-1 상품을 클릭했을 때 로그인 상태면 -> 상세페이지가 보이고 로그인 상태가 아니면 -> 로그인 페이지가 보이도록 함
--> App.js 페이지에서 기본 로그인 상태를 false로 설정 
   ->> useState(false)
--> PrivateRoute.js 페이지를 생성
   ->> 로그인 상태가 true -> 디테일로가고
   ->> 로그인 상태가 false -> 로그인으로 가는 redirect 설정

4. 상품 상세 페이지
--> useParams -> id를 받아서 해당 id에 해당하는 정보를 출력
--> 각 속성들은 product.키값으로 선언해서 출력
